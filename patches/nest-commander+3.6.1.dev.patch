diff --git a/src/command-runner.service.js b/src/command-runner.service.js
index v3.6.1..v3.6.1 100644
--- a/src/command-runner.service.js
+++ b/src/command-runner.service.js
@@ -90,8 +90,11 @@
-            const { flags, description, defaultValue = undefined, required = false, choices = [], name: optionName = '', env = undefined, } = option.meta;
+            const { choices = [], conflicts = [], defaultIsPreset = false, defaultValue = undefined, defaultValueDescription, description, env = undefined, flags, hidden = false, implies = {}, name: optionName = '', preset, required = false } = option.meta;
             const handler = option.discoveredMethod.handler.bind(command.instance);
             const commandOption = new commander_1.Option(flags, description)
-                .default(defaultValue)
-                .preset(defaultValue)
-                .makeOptionMandatory(required);
+                .default(defaultValue, defaultValueDescription)
+                .preset(defaultIsPreset ? defaultValue : preset)
+                .implies(implies)
+                .conflicts(conflicts)
+                .makeOptionMandatory(required)
+                .hideHelp(hidden);
             // choices can be a true boolean or an array of string options for commander.
             // If a boolean, then we know that we are expected to go find the OptionChoiceFOr method.
diff --git a/src/command-factory.interface.d.ts b/src/command-factory.interface.d.ts
index v3.6.1..v3.6.1 100644
--- a/src/command-factory.interface.d.ts
+++ b/src/command-factory.interface.d.ts
@@ -1,4 +1,5 @@
 import { LoggerService, LogLevel } from '@nestjs/common';
+import type { CommanderError } from 'commander';
 export type ErrorHandler = (err: Error) => void;
 export type NestLogger = LoggerService | LogLevel[] | false;
 export interface DefinedCommandFactoryRunOptions extends CommandFactoryRunOptions {
@@ -7,7 +8,7 @@
 }
 export interface CommandFactoryRunOptions {
     logger?: NestLogger;
-    errorHandler?: ErrorHandler;
+    errorHandler?: (err: CommanderError) => void;
     usePlugins?: boolean;
     cliName?: string;
     serviceErrorHandler?: ErrorHandler;
diff --git a/src/command-runner.interface.d.ts b/src/command-runner.interface.d.ts
index v3.6.1..v3.6.1 100644
--- a/src/command-runner.interface.d.ts
+++ b/src/command-runner.interface.d.ts
@@ -1,6 +1,6 @@
 import { DiscoveredMethodWithMeta } from '@golevelup/nestjs-discovery';
 import { ClassProvider, Type } from '@nestjs/common';
-import { Command, CommandOptions } from 'commander';
+import { Command, CommandOptions, Option, OptionValues } from 'commander';
 import type { CheckboxQuestion, ConfirmQuestion, EditorQuestion, ExpandQuestion, InputQuestion, ListQuestion, NumberQuestion, PasswordQuestion, RawListQuestion } from 'inquirer';
 export type InquirerKeysWithPossibleFunctionTypes = 'transformer' | 'validate' | 'when' | 'choices' | 'message' | 'default';
 type InquirerQuestionWithoutFilter<T> = Omit<T, 'filter'>;
@@ -24,9 +24,15 @@
 export interface OptionMetadata {
+    choices?: string[] | true;
+    conflicts?: string | string[];
+    defaultIsPreset?: boolean;
+    defaultValue?: Option['defaultValue'];
+    defaultValueDescription?: string;
+    description?: string;
+    env?: string;
     flags: string;
-    description?: string;
-    defaultValue?: string | boolean | number;
+    hidden?: boolean;
+    implies?: OptionValues;
+    name?: string;
+    preset?: unknown;
     required?: boolean;
-    name?: string;
-    choices?: string[] | true;
-    env?: string;
 }
