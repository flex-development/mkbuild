diff --git a/dist/index.mjs b/dist/index.mjs
index v0.5.16..v0.5.16 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1086,8 +1086,8 @@

 const ESM_STATIC_IMPORT_RE = /(?<=\s|^|;)import\s*(["'\s]*(?<imports>[\w*${}\n\r\t, /]+)from\s*)?["']\s*(?<specifier>(?<="\s*)[^"]*[^"\s](?=\s*")|(?<='\s*)[^']*[^'\s](?=\s*'))\s*["'][\s;]*/gm;
 const DYNAMIC_IMPORT_RE = /import\s*\((?<expression>(?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gm;
-const EXPORT_DECAL_RE = /\bexport\s+(?<declaration>(async function|function|let|const enum|const|enum|var|class))\s+(?<name>[\w$_]+)/g;
-const EXPORT_NAMED_RE = /\bexport\s+{(?<exports>[^}]+?)(?:[,\s]*)}(\s*from\s*["']\s*(?<specifier>(?<="\s*)[^"]*[^"\s](?=\s*")|(?<='\s*)[^']*[^'\s](?=\s*'))\s*["'][^\n;]*)?/g;
+const EXPORT_DECAL_RE = /\bexport( declare)?\s+(?<declaration>(async function|function|let|const enum|const|enum|var|class|type))\s+(?<name>[\w$_]+)/g;
+const EXPORT_NAMED_RE = /\bexport( type)?\s+{(?<exports>[^}]+?)(?:[,\s]*)}(\s*from\s*["']\s*(?<specifier>(?<="\s*)[^"]*[^"\s](?=\s*")|(?<='\s*)[^']*[^'\s](?=\s*'))\s*["'][^\n;]*)?/g;
 const EXPORT_STAR_RE = /\bexport\s*(\*)(\s*as\s+(?<name>[\w$_]+)\s+)?\s*(\s*from\s*["']\s*(?<specifier>(?<="\s*)[^"]*[^"\s](?=\s*")|(?<='\s*)[^']*[^'\s](?=\s*'))\s*["'][^\n;]*)?/g;
 const EXPORT_DEFAULT_RE = /\bexport\s+default\s+/g;
 function findStaticImports(code) {
@@ -1282,12 +1282,7 @@
   const uniqueImports = Array.from(new Set(imports));
   const resolved = /* @__PURE__ */ new Map();
   await Promise.all(uniqueImports.map(async (id) => {
-    let url = await resolve(id, opts);
-    if (url.endsWith(".json")) {
-      const code2 = await loadURL(url);
-      url = toDataURL(await transformModule(code2, { url }));
-    }
-    resolved.set(id, url);
+    resolved.set(id, await resolve(id, opts));
   }));
   const re = new RegExp(uniqueImports.map((i) => `(${i})`).join("|"), "g");
   return code.replace(re, (id) => resolved.get(id));
@@ -1298,7 +1293,7 @@
 function hasESMSyntax(code) {
   return ESM_RE.test(code);
 }
-const CJS_RE = /([\s;]|^)(module.exports\b|exports\.\w|require\s*\(|global\.\w)/m;
+const CJS_RE = /([\s;]|^)(module.exports\b|exports\.\w|require(\.resolve)?\s*\(|global\.\w)/m;
 function hasCJSSyntax(code) {
   return CJS_RE.test(code);
 }
