// Vitest Snapshot v1

exports[`integration:plugins/dts > esbuild > should add .d.cts output 1`] = `
{
  "path": "dist/my-atoi.d.cts",
  "text": "/**
 * @file Fixtures - myAtoi
 * @module fixtures/myAtoi
 * @see https://leetcode.com/problems/string-to-integer-atoi
 */
/**
 * Converts a string, \`s\`, to a 32-bit signed integer (similar to C/C++'s \`atoi\`
 * function).
 *
 * @example myAtoi('') // 0
 * @example myAtoi('42') // 42
 * @example myAtoi('   -42') // -42
 * @example myAtoi('4193 with words') // 4193
 * @example myAtoi('words and 987') // 0
 * @example myAtoi('+-12') // 0
 *
 * @param {string} s - String to convert
 * @return {number} 32-bit signed integer
 */
declare function myAtoi(s: string): number;
export default myAtoi;
",
}
`;

exports[`integration:plugins/dts > esbuild > should add .d.cts output for copied file 1`] = `
{
  "path": "dist/sum-of-intervals.d.cts",
  "text": "export = sumOfIntervals;
/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.cjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */
/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
declare function sumOfIntervals(intervals: [number, number][]): number;
",
}
`;

exports[`integration:plugins/dts > esbuild > should add .d.mts output 1`] = `
{
  "path": "dist/reverse.d.mts",
  "text": "/**
 * @file Fixtures - reverse
 * @module fixtures/reverse
 * @see https://leetcode.com/problems/reverse-integer
 */
/**
 * Given a signed 32-bit integer, \`x\`, the function returns \`x\` with its digits
 * reversed. If reversing \`x\` causes the value to go outside the signed 32-bit
 * integer range, \`0\` will be returned instead.
 *
 * @example reverse(3) // 3
 * @example reverse(-4) // -4
 * @example reverse(123) // 321
 * @example reverse(-123) // -321
 * @example reverse(120) // 21
 * @example reverse(1534236469) // 0
 *
 * @param {number} x - Integer to reverse
 * @return {number} \`x\` with its digits reversed
 */
declare function reverse(x: number): number;
export default reverse;
",
}
`;

exports[`integration:plugins/dts > esbuild > should add .d.mts output for copied file 1`] = `
{
  "path": "dist/sum-of-intervals.d.mts",
  "text": "export default sumOfIntervals;
/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.mjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */
/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
declare function sumOfIntervals(intervals: [number, number][]): number;
",
}
`;

exports[`integration:plugins/dts > esbuild > should add .d.ts output 1`] = `
{
  "path": "dist/dbl-linear.d.ts",
  "text": "/**
 * @file Fixtures - dblLinear
 * @module fixtures/dblLinear
 * @see https://codewars.com/kata/5672682212c8ecf83e000050
 */
/**
 * Consider a sequence \`u\` where \`u\` is defined as follows:
 *
 * 1. The number \`u(0) = 1\` is the first one in \`u\`
 * 2. For each \`x\` in \`u\`, then \`y = 2x + 1\` and \`z = 3x + 1\` must be in \`u\` too
 * 3. There are no other numbers in \`u\`
 *
 * Given an index, \`n\`, the function returns the element at \`u(n)\`.
 *
 * @example
 *  dblLinear(0) // 1
 * @example
 *  dblLinear(10) // 22
 * @example
 *  dblLinear(100) // 447
 * @example
 *  dblLinear(7687) // 111718
 *
 * @param {number} n - Index of element to get
 * @return {number} Element at \`u(n)\`
 */
declare const dblLinear: (n: number) => number;
export default dblLinear;
",
}
`;

exports[`integration:plugins/dts > esbuild > should skip files that are not javascript or typescript 1`] = `
"[
  {
    \\"date\\": \\"2007-04-24T07:00:00.000Z\\",
    \\"close\\": 93.24
  },
  {
    \\"date\\": \\"2007-04-25T07:00:00.000Z\\",
    \\"close\\": 95.35
  },
  {
    \\"date\\": \\"2007-06-08T07:00:00.000Z\\",
    \\"close\\": 124.49
  },
  {
    \\"date\\": \\"2007-06-11T07:00:00.000Z\\",
    \\"close\\": 120.19
  },
  {
    \\"date\\": \\"2007-06-12T07:00:00.000Z\\",
    \\"close\\": 120.38
  }
]
"
`;
