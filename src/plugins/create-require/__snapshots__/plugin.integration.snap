// Vitest Snapshot v1

exports[`integration:plugins/create-require > esbuild > should insert require definition 1`] = `
"/**
 * @file Virtual File System
 * @module vfs
 * @see https://github.com/streamich/memfs
 */
import { createRequire as __createRequire } from \\"node:module\\";
const require = __createRequire(import.meta.url);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x) => typeof require !== \\"undefined\\" ? require : typeof Proxy !== \\"undefined\\" ? new Proxy(x, {
  get: (a, b) => (typeof require !== \\"undefined\\" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== \\"undefined\\")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of \\"' + x + '\\" is not supported');
});
"
`;

exports[`integration:plugins/create-require > esbuild > should insert require definition into minified output 1`] = `"import{createRequire as __createRequire}from\\"node:module\\";const require=__createRequire(import.meta.url);var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __require=(x=>typeof require!==\\"undefined\\"?require:typeof Proxy!==\\"undefined\\"?new Proxy(x,{get:(a,b)=>(typeof require!==\\"undefined\\"?require:a)[b]}):x)(function(x){if(typeof require!==\\"undefined\\")return require.apply(this,arguments);throw new Error('Dynamic require of \\"'+x+'\\" is not supported')});"`;

exports[`integration:plugins/create-require > esbuild > should skip output files without __require shim 1`] = `
"// src/max-value.ts
var max_value_default = 2 ** 31 - 1;

// src/min-value.ts
var min_value_default = (-2) ** 31;

// src/reverse.mts
function reverse(x) {
  if (x >= -9 && x <= 9)
    return x;
  const s = x.toString();
  const r = Number.parseInt([...s, x < 0 ? \\"-\\" : \\"\\"].reverse().join(\\"\\"));
  return r < min_value_default || r > max_value_default ? 0 : r;
}
var reverse_default = reverse;
export {
  reverse_default as default
};
"
`;
