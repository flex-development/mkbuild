// Vitest Snapshot v1

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .cjs file if entry.format is cjs 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/cjs/sum-of-intervals.cjs",
    "text": "/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.cjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */

/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
const sumOfIntervals = intervals => {
  // Return array length if array is empty
  if (intervals.length === 0) return intervals.length

  // If intervals array only has one interval, do simple math
  if (intervals.length === 1) return intervals[0][1] - intervals[0][0]

  // Sort intervals array
  intervals = intervals.sort((a, b) => a[0] - b[0])

  /** @var {number} sum - Sum of intervals in {@link intervals} */
  let sum = 0

  // Calculate sum
  for (let i = 0; i < intervals.length; i++) {
    /** @const {[number, number] | undefined} prev - Previous interval */
    const prev = intervals[i - 1]

    // Bounds of current interval
    const [, b2] = intervals[i]
    let [b1] = intervals[i]

    // If bounds are within prev, remove previous interval
    // Otherwise, add difference in bounds to sum
    if (prev && b1 >= prev[0] && b2 <= prev[1]) {
      intervals.splice((i -= 1) + 1, 1)
    } else {
      // Replace lower bound of current interval if within previous interval
      if (prev && b1 >= prev[0] && b1 <= prev[1]) b1 = prev[1]

      // Add difference in bounds to sum
      sum += b2 - b1
    }
  }

  return sum
}

module.exports = sumOfIntervals
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/cjs/sum-of-intervals.d.cts",
    "text": "export = sumOfIntervals;
/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.cjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */
/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
declare function sumOfIntervals(intervals: [number, number][]): number;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .d.cts file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/cjs/save-mark.d.cts",
    "text": "/**
 * @file Fixtures - save-mark.d.cts
 * @module fixtures/save-mark.d.cts
 * @see https://codewars.com/kata/57fcadd2334ad3bbbc00023c
 */

/**
 * Returns the approximate distance between two pairs of coordinates.
 *
 * @example
 *  saveMark('48.23째 N, 89.10째 E', '48.84째 N, 89.40째 E') // '30KM'
 *
 * @param {string} c1 - First pair of coordinates
 * @param {string} c2 - Second pair of coordinates
 * @return {string} Approximate distance between \`c1\` and \`c2\` (in kilometers)
 */
declare function saveMark(c1: string, c2: string): number

export default saveMark
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .d.mts file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/my-atoi.d.mts",
    "text": "/**
 * @file Fixtures - my-atoi.d.mts
 * @module fixtures/my-atoi.d.mts
 */

/**
 * Converts a string, \`s\`, to a 32-bit signed integer (similar to C/C++'s \`atoi\`
 * function).
 *
 * @example myAtoi('') // 0
 * @example myAtoi('42') // 42
 * @example myAtoi('   -42') // -42
 * @example myAtoi('4193 with words') // 4193
 * @example myAtoi('words and 987') // 0
 * @example myAtoi('+-12') // 0
 *
 * @param {string} s - String to convert
 * @return {number} 32-bit signed integer
 */
declare function myAtoi(s: string): number

export default myAtoi

export { default as MAX_VALUE } from './max-value.mjs'
export { default as MIN_VALUE } from './min-value.mjs'
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .d.ts file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/values.d.ts",
    "text": "declare module '__fixtures__/values' {
  export { default as MAX_VALUE } from './max-value.js'
  export { default as MIN_VALUE } from './min-value.js'
}
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .json file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/cjs/browser-usage.json",
    "text": "[
  {
    \\"date\\": \\"2015 jun 15\\",
    \\"firefox\\": \\"18.82\\",
    \\"google chrome\\": \\"48.09\\",
    \\"internet explorer\\": \\"24.14\\",
    \\"microsoft edge\\": \\"0.03\\",
    \\"mozilla\\": \\"0.12\\",
    \\"opera\\": \\"1.32\\",
    \\"other/unknown\\": \\"0.01\\",
    \\"safari\\": \\"7.46\\"
  },
  {
    \\"date\\": \\"2015 jun 16\\",
    \\"firefox\\": \\"18.96\\",
    \\"google chrome\\": \\"48\\",
    \\"internet explorer\\": \\"24.19\\",
    \\"microsoft edge\\": \\"0.03\\",
    \\"mozilla\\": \\"0.12\\",
    \\"opera\\": \\"1.32\\",
    \\"other/unknown\\": \\"0.01\\",
    \\"safari\\": \\"7.36\\"
  },
  {
    \\"date\\": \\"2015 jun 17\\",
    \\"firefox\\": \\"18.91\\",
    \\"google chrome\\": \\"47.87\\",
    \\"internet explorer\\": \\"24.44\\",
    \\"microsoft edge\\": \\"0.03\\",
    \\"mozilla\\": \\"0.12\\",
    \\"opera\\": \\"1.36\\",
    \\"other/unknown\\": \\"0.01\\",
    \\"safari\\": \\"7.27\\"
  },
  {
    \\"date\\": \\"2015 jun 18\\",
    \\"firefox\\": \\"19.16\\",
    \\"google chrome\\": \\"48.22\\",
    \\"internet explorer\\": \\"23.83\\",
    \\"microsoft edge\\": \\"0.04\\",
    \\"mozilla\\": \\"0.12\\",
    \\"opera\\": \\"1.39\\",
    \\"other/unknown\\": \\"0.01\\",
    \\"safari\\": \\"7.24\\"
  },
  {
    \\"date\\": \\"2015 jun 19\\",
    \\"firefox\\": \\"19.35\\",
    \\"google chrome\\": \\"47.91\\",
    \\"internet explorer\\": \\"23.86\\",
    \\"microsoft edge\\": \\"0.04\\",
    \\"mozilla\\": \\"0.12\\",
    \\"opera\\": \\"1.41\\",
    \\"other/unknown\\": \\"0.01\\",
    \\"safari\\": \\"7.31\\"
  }
]
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .json5 file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/bitcoin-price.json5",
    "text": "{
  currency: 'USD',
  prices: [
    { price: '2486.69', time: '2017-07-03T00:00:00Z' },
    { price: '2457.05', time: '2017-07-02T00:00:00Z' },
    { price: '2486.09', time: '2017-07-01T00:00:00Z' },
    { price: '2535.85', time: '2017-06-30T00:00:00Z' },
    { price: '2546.06', time: '2017-06-29T00:00:00Z' }
  ]
}
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .jsonc file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/cjs/apple-stock.jsonc",
    "text": "[
  {
    \\"date\\": \\"2007-04-24T07:00:00.000Z\\",
    \\"close\\": 93.24
  },
  {
    \\"date\\": \\"2007-04-25T07:00:00.000Z\\",
    \\"close\\": 95.35
  },
  {
    \\"date\\": \\"2007-06-08T07:00:00.000Z\\",
    \\"close\\": 124.49
  },
  {
    \\"date\\": \\"2007-06-11T07:00:00.000Z\\",
    \\"close\\": 120.19
  },
  {
    \\"date\\": \\"2007-06-12T07:00:00.000Z\\",
    \\"close\\": 120.38
  }
]
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transfer > should transfer .mjs file if entry.format is esm 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/sum-of-intervals.mjs",
    "text": "/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.mjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */

/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
const sumOfIntervals = intervals => {
  // Return array length if array is empty
  if (intervals.length === 0) return intervals.length

  // If intervals array only has one interval, do simple math
  if (intervals.length === 1) return intervals[0][1] - intervals[0][0]

  // Sort intervals array
  intervals = intervals.sort((a, b) => a[0] - b[0])

  /** @var {number} sum - Sum of intervals in {@link intervals} */
  let sum = 0

  // Calculate sum
  for (let i = 0; i < intervals.length; i++) {
    /** @const {[number, number] | undefined} prev - Previous interval */
    const prev = intervals[i - 1]

    // Bounds of current interval
    const [, b2] = intervals[i]
    let [b1] = intervals[i]

    // If bounds are within prev, remove previous interval
    // Otherwise, add difference in bounds to sum
    if (prev && b1 >= prev[0] && b2 <= prev[1]) {
      intervals.splice((i -= 1) + 1, 1)
    } else {
      // Replace lower bound of current interval if within previous interval
      if (prev && b1 >= prev[0] && b1 <= prev[1]) b1 = prev[1]

      // Add difference in bounds to sum
      sum += b2 - b1
    }
  }

  return sum
}

export default sumOfIntervals
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/esm/sum-of-intervals.d.mts",
    "text": "export default sumOfIntervals;
/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.mjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */
/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
declare function sumOfIntervals(intervals: [number, number][]): number;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .cjs file if entry.format is not cjs 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/sum-of-intervals.mjs",
    "text": "var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_sum_of_intervals = __commonJS({
  \\"__fixtures__/sum-of-intervals.cjs\\"(exports, module) {
    const sumOfIntervals = (intervals) => {
      if (intervals.length === 0)
        return intervals.length;
      if (intervals.length === 1)
        return intervals[0][1] - intervals[0][0];
      intervals = intervals.sort((a, b) => a[0] - b[0]);
      let sum = 0;
      for (let i = 0; i < intervals.length; i++) {
        const prev = intervals[i - 1];
        const [, b2] = intervals[i];
        let [b1] = intervals[i];
        if (prev && b1 >= prev[0] && b2 <= prev[1]) {
          intervals.splice((i -= 1) + 1, 1);
        } else {
          if (prev && b1 >= prev[0] && b1 <= prev[1])
            b1 = prev[1];
          sum += b2 - b1;
        }
      }
      return sum;
    };
    module.exports = sumOfIntervals;
  }
});
export default require_sum_of_intervals();
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/esm/sum-of-intervals.d.mts",
    "text": "export = sumOfIntervals;
/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.cjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */
/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
declare function sumOfIntervals(intervals: [number, number][]): number;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .cts file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/cjs/my-atoi.cjs",
    "text": "var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \\"default\\", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);
var my_atoi_exports = {};
__export(my_atoi_exports, {
  default: () => my_atoi_default
});
module.exports = __toCommonJS(my_atoi_exports);
var import_max_value = __toESM(require(\\"./max-value.cjs\\"));
var import_min_value = __toESM(require(\\"./min-value.cjs\\"));
function myAtoi(s) {
  const characters = /* @__PURE__ */ new Set([
    \\" \\",
    \\"-\\",
    \\"+\\",
    \\"0\\",
    \\"1\\",
    \\"2\\",
    \\"3\\",
    \\"4\\",
    \\"5\\",
    \\"6\\",
    \\"7\\",
    \\"8\\",
    \\"9\\"
  ]);
  let numeric = \\"\\";
  for (let pos = 0; pos < s.length; pos++) {
    const char = s.charAt(pos);
    if (!characters.has(char))
      break;
    numeric += char;
  }
  return +numeric > import_max_value.default ? import_max_value.default : +numeric < import_min_value.default ? import_min_value.default : Number.isNaN(+numeric) ? 0 : +numeric;
}
var my_atoi_default = myAtoi;
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/cjs/my-atoi.d.cts",
    "text": "/**
 * @file Fixtures - myAtoi
 * @module fixtures/myAtoi
 * @see https://leetcode.com/problems/string-to-integer-atoi
 */
/**
 * Converts a string, \`s\`, to a 32-bit signed integer (similar to C/C++'s \`atoi\`
 * function).
 *
 * @example myAtoi('') // 0
 * @example myAtoi('42') // 42
 * @example myAtoi('   -42') // -42
 * @example myAtoi('4193 with words') // 4193
 * @example myAtoi('words and 987') // 0
 * @example myAtoi('+-12') // 0
 *
 * @param {string} s - String to convert
 * @return {number} 32-bit signed integer
 */
declare function myAtoi(s: string): number;
export default myAtoi;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .js file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/iife/hello-world.js",
    "text": "(() => {
  console.log(\\"hello, world \\\\u{1F44B}\\\\u{1F3FE} \\\\u{1F30E}\\");
})();
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .jsx file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/Counter.mjs",
    "text": "import { jsxDEV } from \\"react/jsx-dev-runtime\\";
import { useState } from \\"react\\";
function Counter() {
  const [count, setcount] = useState(0);
  const decrement = () => setcount((prev) => prev - 1);
  const increment = () => setcount((prev) => prev + 1);
  return /* @__PURE__ */ jsxDEV(\\"div\\", {
    style: { margin: \\"0 auto\\", width: \\"100%\\" },
    children: [
      /* @__PURE__ */ jsxDEV(\\"h4\\", {
        style: { marginBlock: \\"1.5rem\\", textAlign: \\"center\\" },
        children: [
          \\"Count is \\",
          count
        ]
      }, void 0, true, {
        fileName: \\"__fixtures__/Counter.jsx\\",
        lineNumber: 34,
        columnNumber: 7
      }, this),
      /* @__PURE__ */ jsxDEV(\\"div\\", {
        style: {
          alignContent: \\"center\\",
          display: \\"flex\\",
          justifyContent: \\"center\\"
        },
        children: [
          /* @__PURE__ */ jsxDEV(\\"button\\", {
            onClick: decrement,
            style: { padding: \\".75rem 1.25rem\\" },
            children: \\"-\\"
          }, void 0, false, {
            fileName: \\"__fixtures__/Counter.jsx\\",
            lineNumber: 44,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ jsxDEV(\\"button\\", {
            onClick: increment,
            style: { padding: \\".75rem 1.25rem\\" },
            children: \\"+\\"
          }, void 0, false, {
            fileName: \\"__fixtures__/Counter.jsx\\",
            lineNumber: 47,
            columnNumber: 9
          }, this),
          /* @__PURE__ */ jsxDEV(\\"button\\", {
            onClick: () => setcount(0),
            style: { padding: \\".75rem 1.25rem\\" },
            children: \\"Reset\\"
          }, void 0, false, {
            fileName: \\"__fixtures__/Counter.jsx\\",
            lineNumber: 50,
            columnNumber: 9
          }, this)
        ]
      }, void 0, true, {
        fileName: \\"__fixtures__/Counter.jsx\\",
        lineNumber: 37,
        columnNumber: 7
      }, this)
    ]
  }, void 0, true, {
    fileName: \\"__fixtures__/Counter.jsx\\",
    lineNumber: 33,
    columnNumber: 5
  }, this);
}
var Counter_default = Counter;
export {
  Counter_default as default
};
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/esm/Counter.d.mts",
    "text": "/**
 * @file Fixtures - Counter.jsx
 * @module fixtures/Counter.jsx
 */

import { useState } from 'react'

/**
 * Renders a basic counter.
 *
 * @see https://dev.to/estheragbaje/how-to-use-react-hooks-to-create-a-counter-component-1bmp
 *
 * @return {JSX.Element} JSX element
 */
function Counter() {
  const [count, setcount] = useState(0)

  /**
   * Decreases {@link count}.
   *
   * @return {void} Nothing when complete
   */
  const decrement = () => setcount(prev => prev - 1)

  /**
   * Increases {@link count}.
   *
   * @return {void} Nothing when complete
   */
  const increment = () => setcount(prev => prev + 1)

  return (
    <div style={{ margin: '0 auto', width: '100%' }}>
      <h4 style={{ marginBlock: '1.5rem', textAlign: 'center' }}>
        Count is {count}
      </h4>
      <div
        style={{
          alignContent: 'center',
          display: 'flex',
          justifyContent: 'center'
        }}
      >
        <button onClick={decrement} style={{ padding: '.75rem 1.25rem' }}>
          -
        </button>
        <button onClick={increment} style={{ padding: '.75rem 1.25rem' }}>
          +
        </button>
        <button
          onClick={() => setcount(0)}
          style={{ padding: '.75rem 1.25rem' }}
        >
          Reset
        </button>
      </div>
    </div>
  )
}

export default Counter
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .mjs file if entry.format is not esm 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/cjs/sum-of-intervals.cjs",
    "text": "var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);
var sum_of_intervals_exports = {};
__export(sum_of_intervals_exports, {
  default: () => sum_of_intervals_default
});
module.exports = __toCommonJS(sum_of_intervals_exports);
const sumOfIntervals = (intervals) => {
  if (intervals.length === 0)
    return intervals.length;
  if (intervals.length === 1)
    return intervals[0][1] - intervals[0][0];
  intervals = intervals.sort((a, b) => a[0] - b[0]);
  let sum = 0;
  for (let i = 0; i < intervals.length; i++) {
    const prev = intervals[i - 1];
    const [, b2] = intervals[i];
    let [b1] = intervals[i];
    if (prev && b1 >= prev[0] && b2 <= prev[1]) {
      intervals.splice((i -= 1) + 1, 1);
    } else {
      if (prev && b1 >= prev[0] && b1 <= prev[1])
        b1 = prev[1];
      sum += b2 - b1;
    }
  }
  return sum;
};
var sum_of_intervals_default = sumOfIntervals;
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/cjs/sum-of-intervals.d.cts",
    "text": "export default sumOfIntervals;
/**
 * @file Fixtures - sumOfIntervals
 * @module fixtures/sum-of-intervals.mjs
 * @see https://codewars.com/kata/52b7ed099cdc285c300001cd
 */
/**
 * Given an array of intervals, all of varying lengths, the function returns the
 * sum of all interval lengths. **Overlapping intervals will be counted once**.
 *
 * @example
 *  sumOfIntervals([[1, 5]]) // 4
 * @example
 *  sumOfIntervals([[1, 4], [7, 10], [3, 5]]) // 7
 * @example
 *  sumOfIntervals([[1, 5], [10, 15], [-1, 3]]) // 11
 *
 * @param {[number, number][]} intervals - Intervals
 * @return {number} Sum of all interval lengths
 */
declare function sumOfIntervals(intervals: [number, number][]): number;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .mts file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/reverse.mjs",
    "text": "import MAX_VALUE from \\"./max-value.mjs\\";
import MIN_VALUE from \\"./min-value.mjs\\";
function reverse(x) {
  if (x >= -9 && x <= 9)
    return x;
  const s = x.toString();
  const r = Number.parseInt([...s, x < 0 ? \\"-\\" : \\"\\"].reverse().join(\\"\\"));
  return r < MIN_VALUE || r > MAX_VALUE ? 0 : r;
}
var reverse_default = reverse;
export {
  reverse_default as default
};
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/esm/reverse.d.mts",
    "text": "/**
 * @file Fixtures - reverse
 * @module fixtures/reverse
 * @see https://leetcode.com/problems/reverse-integer
 */
/**
 * Given a signed 32-bit integer, \`x\`, the function returns \`x\` with its digits
 * reversed. If reversing \`x\` causes the value to go outside the signed 32-bit
 * integer range, \`0\` will be returned instead.
 *
 * @example reverse(3) // 3
 * @example reverse(-4) // -4
 * @example reverse(123) // 321
 * @example reverse(-123) // -321
 * @example reverse(120) // 21
 * @example reverse(1534236469) // 0
 *
 * @param {number} x - Integer to reverse
 * @return {number} \`x\` with its digits reversed
 */
declare function reverse(x: number): number;
export default reverse;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .ts file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/dbl-linear.mjs",
    "text": "const dblLinear = (n) => {
  const u = [1];
  let j = 0;
  let k = 0;
  for (let i = 1; i <= n; i++) {
    const y = 2 * u[j] + 1;
    const z = 3 * u[k] + 1;
    u[i] = Math.min(y, z);
    if (u[i] === y)
      j++;
    if (u[i] === z)
      k++;
  }
  return u[n];
};
var dbl_linear_default = dblLinear;
export {
  dbl_linear_default as default
};
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/esm/dbl-linear.d.mts",
    "text": "/**
 * @file Fixtures - dblLinear
 * @module fixtures/dblLinear
 * @see https://codewars.com/kata/5672682212c8ecf83e000050
 */
/**
 * Consider a sequence \`u\` where \`u\` is defined as follows:
 *
 * 1. The number \`u(0) = 1\` is the first one in \`u\`
 * 2. For each \`x\` in \`u\`, then \`y = 2x + 1\` and \`z = 3x + 1\` must be in \`u\` too
 * 3. There are no other numbers in \`u\`
 *
 * Given an index, \`n\`, the function returns the element at \`u(n)\`.
 *
 * @example
 *  dblLinear(0) // 1
 * @example
 *  dblLinear(10) // 22
 * @example
 *  dblLinear(100) // 447
 * @example
 *  dblLinear(7687) // 111718
 *
 * @param {number} n - Index of element to get
 * @return {number} Element at \`u(n)\`
 */
declare const dblLinear: (n: number) => number;
export default dblLinear;
",
    "warnings": [],
  },
]
`;

exports[`functional:utils/esbuilder > file-to-file > transpilation > should transpile .tsx file 1`] = `
[
  {
    "errors": [],
    "outfile": "dist/esm/Button.mjs",
    "text": "import { jsxDEV } from \\"react/jsx-dev-runtime\\";
import {
  forwardRef,
  useState
} from \\"react\\";
import s, { css } from \\"styled-components\\";
const Button = s.button.attrs((p) => ({
  \\"aria-disabled\\": p.disabled ?? void 0,
  \\"aria-hidden\\": p.hidden ?? void 0
}))((p) => {
  return css\`
    background-color: \${p.$bg};
    color: \${p.$color};
  \`;
});
Button.defaultProps = {
  $bg: \\"black\\",
  $color: \\"white\\",
  $fontsize: \\"1.25rem\\",
  type: \\"button\\"
};
const CounterButton = forwardRef(function(props = {}, ref) {
  const { count, ...rest } = props;
  const [clicks, setclicks] = useState(count);
  const increment = () => setclicks((prev) => prev + 1);
  return /* @__PURE__ */ jsxDEV(Button, {
    ...rest,
    onClick: increment,
    ref,
    children: clicks
  }, void 0, false, {
    fileName: \\"__fixtures__/Button.tsx\\",
    lineNumber: 99,
    columnNumber: 5
  }, this);
});
CounterButton.displayName = \\"CounterButton\\";
CounterButton.defaultProps = {};
export {
  CounterButton,
  Button as default
};
",
    "warnings": [],
  },
  {
    "errors": [],
    "outfile": "dist/esm/Button.d.mts",
    "text": "/**
 * @file Fixtures - Button
 * @module fixtures/Button
 */

import {
  forwardRef,
  useState,
  type ButtonHTMLAttributes,
  type ForwardedRef
} from 'react'
import s, { css } from 'styled-components'

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  /**
   * Button background color.
   *
   * @default 'black'
   */
  $bg?: ButtonHTMLAttributes<HTMLButtonElement>['color']

  /**
   * Button text color.
   *
   * @default 'white'
   */
  $color?: ButtonHTMLAttributes<HTMLButtonElement>['color']

  /**
   * Button font size.
   *
   * @default '1.25rem'
   */
  $fontsize?: number | string

  /**
   * Mark button as disabled.
   */
  disabled?: boolean
}

interface CounterButtonProps extends ButtonProps {
  /**
   * Initial click count.
   *
   * @default 0
   */
  count?: number
}

/**
 * Renders an HTML \`<button>\` element.
 *
 * @see https://developer.mozilla.org/docs/Web/HTML/Element/button
 * @see https://developer.mozilla.org/docs/Web/API/HTMLButtonElement
 *
 * @visibleName Button
 */
const Button = s.button.attrs<ButtonProps>(p => ({
  'aria-disabled': p.disabled ?? undefined,
  'aria-hidden': p.hidden ?? undefined
}))<ButtonProps>(p => {
  return css\`
    background-color: \${p.$bg};
    color: \${p.$color};
  \`
})

Button.defaultProps = {
  $bg: 'black',
  $color: 'white',
  $fontsize: '1.25rem',
  type: 'button'
}

/**
 * Renders a button that displays how many times it has been clicked.
 *
 * @param {CounterButtonProps} [props={}] - Component props
 * @param {ForwardedRef<HTMLButtonElement>} [ref] - \`<button>\` reference
 * @return {JSX.Element} Counter button markup
 */
const CounterButton = forwardRef(function (
  props: CounterButtonProps = {},
  ref?: ForwardedRef<HTMLButtonElement>
): JSX.Element {
  const { count, ...rest } = props

  const [clicks, setclicks] = useState<number>(count!)

  /**
   * Increases {@link clicks}.
   *
   * @return {void} Nothing when complete
   */
  const increment = (): void => setclicks(prev => prev + 1)

  return (
    <Button {...rest} onClick={increment} ref={ref}>
      {clicks}
    </Button>
  )
})

CounterButton.displayName = 'CounterButton'
CounterButton.defaultProps = {}

export {
  Button as default,
  CounterButton,
  type ButtonProps,
  type CounterButtonProps
}
",
    "warnings": [],
  },
]
`;
